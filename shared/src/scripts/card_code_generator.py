#!/usr/bin/env python3

from sys import argv
import re

def generate (output_file, *input_files):
	classes = []

	for name in input_files:
		with open(name, 'r') as file:
			for line in file:
				match = re.match(r'.*class ([A-Za-z]+) : Card', line)
				if match is not None:
					classes.append(match.group(1))

	pairs = ''

	for name in classes:
		pairs += f'\t\t{{ "{name}", typeof({name}) }},\n'

	pairs = pairs[:-2] # remove last newline and comma

	output = f"""//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using CTShared.Cards;
using CTShared.Networking;

namespace CTShared
{{
public abstract partial class Card : Packet
{{
	private readonly static ImmutableDictionary<string, Type> namesToCards = new Dictionary<string, Type>
	{{
{pairs}
	}}.ToImmutableDictionary();
}}
}}
"""

	file = open(output_file, 'w')
	file.write(output)

if __name__ == "__main__":
	if len(argv) < 3:
		print('usage: python cardCodeGenerator.py output_file input_file[s]')
		quit(1)
	
	generate(argv[1], *argv[2:])
